{"version":3,"sources":["components/Player.js","components/Card.js","components/Layout.js","components/Table.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Player","props","which_player","is_ai","tag","className","Card","suit","format_card","colour","suit_element","class","value","Layout","Container","children","Table","Row","Col","Styles","styled","div","NavigationBar","Navbar","expand","Brand","href","Collapse","id","Nav","Item","Link","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAceA,MAVf,SAAgBC,GACZ,IAAIC,EAAeD,EAAME,MAAO,UAAW,UACvCC,EAAqB,YAAfF,EAA0B,KAAM,QAC1C,OACI,yBAAKG,UAAWH,GACZ,uBAAGG,UAAU,aAAaD,K,QCgBvBE,MAXf,SAAcL,GAAQ,IAAD,EAXrB,SAAqBM,GACjB,MAAY,MAATA,EACQ,CAAC,SAAK,SACC,MAATA,EACE,CAAC,SAAK,SACC,MAATA,EACE,CAAC,SAAK,OACC,MAATA,EACE,CAAC,SAAK,YADX,EAKiBC,CAAYP,EAAMM,MADxB,mBACVA,EADU,KACJE,EADI,KAEXC,EAAe,uBAAGC,MAAK,mBAAcF,IAAWF,GACtD,OACI,yBAAKI,MAAM,cACP,uBAAGA,MAAK,oBAAeF,IAAWR,EAAMW,OACvCF,I,wBCjBAG,EAAS,SAACZ,GAAD,OAClB,kBAACa,EAAA,EAAD,KACKb,EAAMc,WCuCAC,MAnCf,SAAef,GACX,OACI,6BACI,kBAAC,EAAD,KACI,kBAACgB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,yBAAKb,UAAU,WACX,+CAIZ,yBAAKA,UAAU,SACX,yBAAKA,UAAU,SACX,kBAAC,EAAD,CAAMO,MAAO,IAAKL,KAAM,MACxB,kBAAC,EAAD,CAAMK,MAAO,IAAKL,KAAM,MACxB,kBAAC,EAAD,CAAMK,MAAO,IAAKL,KAAM,MACxB,kBAAC,EAAD,CAAMK,MAAO,IAAKL,KAAM,MACxB,kBAAC,EAAD,CAAMK,MAAO,IAAKL,KAAM,OAE5B,kBAACU,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CAAQf,OAAO,KAEnB,kBAACe,EAAA,EAAD,KACI,kBAAC,EAAD,CAAQf,OAAO,U,yRC7B3C,IAAMgB,E,MAASC,EAAOC,IAAV,KAcCC,EAAgB,kBACzB,kBAACH,EAAD,KACI,kBAACI,EAAA,EAAD,CAAQC,OAAO,MACX,kBAACD,EAAA,EAAOE,MAAR,CAAcC,KAAK,KAAnB,SACA,kBAACH,EAAA,EAAOI,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKxB,UAAU,WACX,kBAACwB,EAAA,EAAIC,KAAL,KAAU,kBAACD,EAAA,EAAIE,KAAL,CAAUL,KAAK,KAAf,cCLfM,MAdf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,IAAM4B,SAAP,KAEI,kBAAC,EAAD,MAEA,kBAAC,EAAD,SCAUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2ae049e.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport '../styles/player.css';\n\n\nfunction Player(props) {\n    let which_player = props.is_ai? \"player2\": \"player1\";\n    let tag = which_player===\"player2\"? \"AI\": \"Guest\";\n    return (\n        <div className={which_player}>\n            <p className=\"playerTag\">{tag}</p>\n        </div>\n    )\n}\n\nexport default Player;\n","import React from 'react'\nimport '../styles/table.css';\n\nfunction format_card(suit){\n    if(suit === 'c'){\n        return ['♣', 'black'];\n    }else if(suit === 's'){\n        return ['♠', 'black'];\n    }else if(suit === 'd'){\n        return ['♦', 'red'];\n    }else if(suit === 'h'){\n        return ['♥', 'red'];\n    }\n}\nfunction Card(props) {\n    const [suit, colour] = format_card(props.suit)\n    const suit_element = <p class={`card-img ${colour}`}>{suit}</p>;\n    return (\n        <div class=\"card-small\">\n            <p class={`card-text ${colour}`}>{props.value}</p>\n            {suit_element}\n        </div>\n    )\n}\n\nexport default Card\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nexport const Layout = (props) => (\n    <Container>\n        {props.children}\n    </Container>\n)","import React, {useState, useEffect} from 'react';\nimport '../styles/table.css';\nimport '../styles/player.css';\nimport Player from './Player.js'\nimport Button from 'react-bootstrap/Button';\nimport Card from './Card.js';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { Layout } from './Layout.js';\n\nfunction Table(props){\n    return (\n        <div>\n            <Layout>\n                <Row>\n                    <Col>\n                        <div className=\"heading\">\n                            <h1>Texas HoldEm</h1>\n                        </div>\n                    </Col>\n                </Row>\n                <div className=\"table\">\n                    <div className=\"board\">\n                        <Card value={'A'} suit={'c'}/>\n                        <Card value={'K'} suit={'s'}/>\n                        <Card value={'5'} suit={'d'}/>\n                        <Card value={'7'} suit={'c'}/>\n                        <Card value={'J'} suit={'h'}/>\n                    </div>\n                    <Row>   \n                        <Col>   \n                            <Player is_ai={false} />\n                        </Col>  \n                        <Col>   \n                            <Player is_ai={true} />\n                        </Col>  \n                    </Row>  \n                </div>\n            </Layout>\n        </div>\n\n    )\n\n}\n\nexport default Table;","import React from 'react'; \nimport { Nav, Navbar } from 'react-bootstrap';\nimport styled  from 'styled-components';\n\nconst Styles = styled.div`\n    .navbar{\n        background-color: #222;\n    }\n\n    .navbar-brand, .navbar-nav, .nav-link {\n        color: #bbb;\n\n        &:hover{\n            color:white\n        }\n    }\n`;\n\nexport const NavigationBar = () => (\n    <Styles>\n        <Navbar expand=\"lg\">\n            <Navbar.Brand href=\"/\">Poker</Navbar.Brand>\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"ml-auto\">\n                    <Nav.Item><Nav.Link href=\"/\">Home</Nav.Link></Nav.Item>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    </Styles>\n)\n\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Table from './components/Table.js';\nimport { NavigationBar } from './components/Navbar.js';\n\nfunction App() {\n  return (\n    <div className=\"App\"> \n      <React.Fragment>\n\n          <NavigationBar />\n\n          <Table />\n\n      </React.Fragment>\n    </div>\n  )\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}